{"version":3,"file":"196.talkdeskchatsdk.js","mappings":"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","sources":["webpack://TalkdeskChatSDK/./node_modules/@newrelic/browser-agent-core/common/event-emitter/register-handler.js","webpack://TalkdeskChatSDK/./node_modules/@newrelic/browser-agent-core/features/page-action/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { handleEE, globalEE } from './handle'\n\n// export default defaultRegister\nexport { globalRegister as global }\nexport { defaultRegister as registerHandler }\n\ndefaultRegister.on = registerWithSpecificEmitter\n\nvar handlers = defaultRegister.handlers = {}\nvar globalHandlers = globalRegister.handlers = {}\n\nexport function defaultRegister (type, handler, group, ee) {\n  registerWithSpecificEmitter(ee || handleEE, handlers, type, handler, group)\n}\n\nfunction globalRegister (type, handler, group) {\n  registerWithSpecificEmitter(globalEE, globalHandlers, type, handler, group)\n}\n\nfunction registerWithSpecificEmitter (ee, handlers, type, handler, group) {\n  if (!group) group = 'feature'\n  if (!ee) ee = handleEE\n\n  if (ee.isBuffering(type)) {\n    var groupHandlers = handlers[group] = handlers[group] || {}\n    var list = groupHandlers[type] = groupHandlers[type] || []\n    list.push([ee, handler])\n  } else {\n    ee.on(type, handler)\n  }\n}\n","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../../../common/util/map-own'\nimport { stringify } from '../../../common/util/stringify'\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler'\n// import { on as onHarvest } from '../../../common/harvest/harvest'\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler'\nimport { cleanURL } from '../../../common/url/clean-url'\nimport { getConfigurationValue, getInfo, getRuntime, setInfo } from '../../../common/config/config'\nimport { FeatureBase } from '../../../common/util/feature-base'\n\nexport class Aggregate extends FeatureBase {\n  constructor(agentIdentifier, aggregator) {\n    super(agentIdentifier, aggregator)\n    this.eventsPerMinute = 240\n    this.harvestTimeSeconds = getConfigurationValue('ins.harvestTimeSeconds') || 30\n    this.eventsPerHarvest = this.eventsPerMinute * this.harvestTimeSeconds / 60\n    this.referrerUrl\n    this.currentEvents\n\n    this.events = []\n    this.att = {}\n    setInfo(this.agentIdentifier, {jsAttributes: this.att})\n\n    if (document.referrer) this.referrerUrl = cleanURL(document.referrer)\n\n    register('api-setCustomAttribute', (...args) => this.setCustomAttribute(...args), 'api', this.ee)\n\n    this.ee.on('feat-ins', function () {\n      register('api-addPageAction', (...args) => this.addPageAction(...args), undefined, this.ee)\n\n      var scheduler = new HarvestScheduler('ins', {onFinished: (...args) => this.onHarvestFinished(...args)}, this)\n      scheduler.harvest.on('ins', (...args) => this.onHarvestStarted(...args))\n      scheduler.startTimer(this.harvestTimeSeconds, 0)\n    })\n  }\n\n  onHarvestStarted (options) {\n    const { userAttributes, atts } = getInfo(this.agentIdentifier)\n    var payload = ({\n      qs: {\n        ua: userAttributes,\n        at: atts\n      },\n      body: {\n        ins: this.events\n      }\n    })\n\n    if (options.retry) {\n      this.currentEvents = this.events\n    }\n\n    this.events = []\n    return payload\n  }\n\n  onHarvestFinished (result) {\n    if (result && result.sent && result.retry && this.currentEvents) {\n      this.events = this.events.concat(this.currentEvents)\n      this.currentEvents = null\n    }\n  }\n\n  // WARNING: Insights times are in seconds. EXCEPT timestamp, which is in ms.\n  addPageAction (t, name, attributes) {\n    if (this.events.length >= this.eventsPerHarvest) return\n    var width\n    var height\n    var eventAttributes = {}\n\n    if (typeof window !== 'undefined' && window.document && window.document.documentElement) {\n      // Doesn't include the nav bar when it disappears in mobile safari\n      // https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/dimensions.js#L23\n      width = window.document.documentElement.clientWidth\n      height = window.document.documentElement.clientHeight\n    }\n\n    var defaults = {\n      timestamp: t + getRuntime(this.agentIdentifier).offset,\n      timeSinceLoad: t / 1000,\n      browserWidth: width,\n      browserHeight: height,\n      referrerUrl: this.referrerUrl,\n      currentUrl: cleanURL('' + location),\n      pageUrl: cleanURL(getRuntime(this.agentIdentifier).origin),\n      eventType: 'PageAction'\n    }\n\n    mapOwn(defaults, set)\n    mapOwn(this.att, set)\n    if (attributes && typeof attributes === 'object') {\n      mapOwn(attributes, set)\n    }\n    eventAttributes.actionName = name || ''\n\n    this.events.push(eventAttributes)\n\n    function set (key, val) {\n      eventAttributes[key] = (val && typeof val === 'object' ? stringify(val) : val)\n    }\n  }\n\n  setCustomAttribute (t, key, value) {\n    this.att[key] = value\n  }\n}\n\n"],"names":["defaultRegister","on","registerWithSpecificEmitter","handlers","globalHandlers","globalRegister","type","handler","group","ee","isBuffering","groupHandlers","push","Aggregate","constructor","agentIdentifier","aggregator","super","this","eventsPerMinute","harvestTimeSeconds","eventsPerHarvest","referrerUrl","currentEvents","events","att","jsAttributes","document","referrer","args","setCustomAttribute","addPageAction","undefined","scheduler","onFinished","onHarvestFinished","harvest","onHarvestStarted","startTimer","options","userAttributes","atts","payload","qs","ua","at","body","ins","retry","result","sent","concat","t","name","attributes","length","width","height","eventAttributes","window","documentElement","clientWidth","clientHeight","defaults","timestamp","offset","timeSinceLoad","browserWidth","browserHeight","currentUrl","location","pageUrl","origin","eventType","set","actionName","key","val","value"],"sourceRoot":""}