{"version":3,"file":"624.talkdeskchatsdk.js","mappings":"0QAcIA,EAAcC,OAAOC,QACrBC,GAAe,EACfC,EAAc,eAMX,MAAMC,mBAAmB,IAC9B,WAAAC,CAAYC,GACVC,MAAMD,GAGNE,KAAKC,SAAW,EAEhB,MAAMC,EAAOF,KAEbA,KAAKG,GAAGC,GAAG,YAAY,SAAUC,EAAMC,EAAKC,GACtCb,IACFM,KAAKC,SAAWD,KAAKC,SAAWD,KAAKC,SAAW,EAAI,EAExD,IAEAD,KAAKG,GAAGC,GAAG,UAAU,SAAUC,EAAMC,EAAKE,GACpCd,IAAiBc,EAAIb,MACvB,OAASa,EAAKb,GAAa,SAASc,SAClC,OAAO,CACT,IACAT,KAAKU,QAAS,EACdC,OAAOH,OAAKI,EAAWV,EAAKC,IAEhC,IAEAH,KAAKG,GAAGC,GAAG,UAAU,WACdV,IACAM,KAAKU,QAAUV,KAAKC,SAAW,IAAGD,KAAKC,UAAY,EAC1D,IAEAD,KAAKG,GAAGC,GAAG,kBAAmBS,KAC5B,QAAO,OAAQ,CAACA,GAAG,WAAO,QAAOD,OAAWA,EAAWZ,KAAKG,GAAE,IAMhE,MAAMW,EAActB,OAAOC,QAC3BD,OAAOC,QAAU,IAAIY,KACfS,GAAaA,KAAeT,GAChCL,KAAKe,kBAAkBV,IAChB,GAGT,IACEb,OAAOwB,iBAAiB,sBAAuBH,IAC7Cb,KAAKe,eAAe,KAAM,KAAM,KAAM,KAAM,IAAIE,MAAMJ,EAAEK,QAAO,GAEnE,CAAE,MAAOV,GAET,CAEA,IACE,MAAM,IAAIS,KACZ,CAAE,MAAOJ,GAEH,UAAWA,KACb,QAAUb,KAAKG,KACf,QAAQH,KAAKG,IAET,qBAAsBX,SACxB,QAAWQ,KAAKG,KAGd,OAAWH,KAAKF,iBAAiBqB,eACnC,QAAQnB,KAAKG,IAGfT,GAAe,EAEnB,CACF,CAIA,cAAAqB,CAAeK,EAASC,EAAUC,EAAQC,EAAQC,GAChD,IACMxB,KAAKC,SAAUD,KAAKC,UAAY,EAC/BU,OAAOa,GAAY,IAAIC,kBAAkBL,EAASC,EAAUC,IAAS,EAAMtB,KAAKG,GACvF,CAAE,MAAOU,GACP,KACE,QAAO,OAAQ,CAACA,GAAG,WAAO,QAAOD,OAAWA,EAAWZ,KAAKG,GAC9D,CAAE,MAAOK,GAET,CACF,CAEA,MAA2B,mBAAhBjB,GAAmCA,EAAYmC,MAAM1B,KAAM,IAAM2B,WAE9E,EAGF,SAASF,kBAAkBL,EAASC,EAAUC,GAC5CtB,KAAKoB,QAAUA,GAAW,gDAC1BpB,KAAK4B,UAAYP,EACjBrB,KAAK6B,KAAOP,CACd,CAGA,SAASX,OAAOH,EAAKsB,EAAY3B,GAG/B,IAAI4B,EAASD,EAAsB,MAAR,WAC3B,QAAO,MAAO,CAACtB,EAAKuB,QAAOnB,OAAWA,EAAWT,EACnD,C","sources":["webpack://TalkdeskChatSDK/./node_modules/@newrelic/browser-agent-core/features/js-errors/instrument/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { handle } from '../../../common/event-emitter/handle'\nimport { getRuntime } from '../../../common/config/config'\nimport { now } from '../../../common/timing/now'\nimport { getOrSet } from '../../../common/util/get-or-set'\nimport { wrapRaf, wrapTimer, wrapEvents, wrapXhr } from '../../../common/wrap'\nimport slice from 'lodash._slice'\nimport './debug'\nimport { FeatureBase } from '../../../common/util/feature-base'\n\nvar origOnerror = window.onerror\nvar handleErrors = false\nvar NR_ERR_PROP = 'nr@seenError'\n\n// skipNext counter to keep track of uncaught\n// errors that will be the same as caught errors.\n// var skipNext = 0\n\nexport class Instrument extends FeatureBase {\n  constructor(agentIdentifier) {\n    super(agentIdentifier)\n    // skipNext counter to keep track of uncaught\n    // errors that will be the same as caught errors.\n    this.skipNext = 0\n\n    const self = this\n\n    this.ee.on('fn-start', function (args, obj, methodName) {\n      if (handleErrors) {\n        this.skipNext = this.skipNext ? this.skipNext + 1 : 1\n      }\n    })\n\n    this.ee.on('fn-err', function (args, obj, err) {\n      if (handleErrors && !err[NR_ERR_PROP]) {\n        getOrSet(err, NR_ERR_PROP, function getVal() {\n          return true\n        })\n        this.thrown = true\n        notice(err, undefined, self.ee)\n      }\n    })\n\n    this.ee.on('fn-end', function () {\n      if (!handleErrors) return\n      if (!this.thrown && this.skipNext > 0) this.skipNext -= 1\n    })\n\n    this.ee.on('internal-error', (e) => {\n      handle('ierr', [e, now(), true], undefined, undefined, this.ee)\n    })\n\n    // Declare that we are using err instrumentation\n    // require('./debug')\n\n    const prevOnError = window.onerror\n    window.onerror = (...args) => {\n      if (prevOnError) prevOnError(...args)\n      this.onerrorHandler(...args)\n      return false\n    }\n\n    try {\n      window.addEventListener('unhandledrejection', (e) => {\n        this.onerrorHandler(null, null, null, null, new Error(e.reason))\n      })\n    } catch (err) {\n      // do nothing -- addEventListener is not supported\n    }\n\n    try {\n      throw new Error()\n    } catch (e) {\n      // Only wrap stuff if try/catch gives us useful data. It doesn't in IE < 10.\n      if ('stack' in e) {\n        wrapTimer(this.ee)\n        wrapRaf(this.ee)\n\n        if ('addEventListener' in window) {\n          wrapEvents(this.ee)\n        }\n\n        if (getRuntime(this.agentIdentifier).xhrWrappable) {\n          wrapXhr(this.ee)\n        }\n\n        handleErrors = true\n      }\n    }\n  }\n\n  // FF and Android browsers do not provide error info to the 'error' event callback,\n  // so we must use window.onerror\n  onerrorHandler(message, filename, lineno, column, errorObj) {\n    try {\n      if (this.skipNext) this.skipNext -= 1\n      else notice(errorObj || new UncaughtException(message, filename, lineno), true, this.ee)\n    } catch (e) {\n      try {\n        handle('ierr', [e, now(), true], undefined, undefined, this.ee)\n      } catch (err) {\n        // do nothing\n      }\n    }\n\n    if (typeof origOnerror === 'function') return origOnerror.apply(this, slice(arguments))\n    return false\n  }\n}\n\nfunction UncaughtException(message, filename, lineno) {\n  this.message = message || 'Uncaught error with no additional information'\n  this.sourceURL = filename\n  this.line = lineno\n}\n\n// emits 'handle > error' event, which the error aggregator listens on\nfunction notice(err, doNotStamp, ee) {\n  // by default add timestamp, unless specifically told not to\n  // this is to preserve existing behavior\n  var time = (!doNotStamp) ? now() : null\n  handle('err', [err, time], undefined, undefined, ee)\n}\n"],"names":["origOnerror","window","onerror","handleErrors","NR_ERR_PROP","Instrument","constructor","agentIdentifier","super","this","skipNext","self","ee","on","args","obj","methodName","err","getVal","thrown","notice","undefined","e","prevOnError","onerrorHandler","addEventListener","Error","reason","xhrWrappable","message","filename","lineno","column","errorObj","UncaughtException","apply","arguments","sourceURL","line","doNotStamp","time"],"sourceRoot":""}