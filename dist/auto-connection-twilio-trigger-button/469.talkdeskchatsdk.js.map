{"version":3,"file":"469.talkdeskchatsdk.js","mappings":"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","sources":["webpack://TalkdeskChatSDK/./packages/channel-components/components/InitialScreen/components/CustomDropdown/CustomDropdown.tsx","webpack://TalkdeskChatSDK/./packages/channel-components/components/InitialScreen/components/CustomDropdown/index.ts"],"sourcesContent":["/*\n * Talkdesk Confidential\n *\n * Copyright (C) Talkdesk Inc. 2022\n *\n * The source code for this program is not published or otherwise divested\n * of its trade secrets, irrespective of what has been deposited with the\n * U.S. Copyright Office. Unauthorized copying of this file, via any medium\n * is strictly prohibited.\n */\n\nimport React, { useEffect, useRef, useState, useCallback, useContext } from 'react';\nimport { WebchatContext } from '@botonic/react';\nimport clsx from 'clsx';\nimport i18next from 'i18next';\nimport arrow from '../../../../assets/right-arrow.svg';\n\nimport styles from './CustomDropdown.module.css';\nimport commonStyles from '../../styles/common.module.css';\nimport { toLowerCase } from '../../utils/helper';\n\ninterface Props {\n  label: string;\n  onChange: (value: string) => void;\n  onBlur: () => void;\n  options: Option[];\n  value: string;\n  isError: boolean;\n  required: boolean;\n}\n\ninterface Option {\n  label: string;\n  value: string;\n  key: string;\n}\n\ninterface SelectProps {\n  options: Option[];\n  onChange: (value: string) => void;\n  onBlur: () => void;\n  value: string;\n  label: string;\n  isError: boolean;\n}\n\nconst noop = () => ({});\n\nexport const Select = (props: SelectProps) => {\n  const { options, onChange, value, onBlur, isError, label } = props;\n  const [open, setOpen] = useState<boolean>(false);\n  const [arrowStatus, setArrowStatus] = useState<boolean>(false);\n  const {\n    webchatState: { theme },\n  } = useContext(WebchatContext);\n\n  const isClicked = useRef(false);\n\n  const handleTrigger = (): void => {\n    setOpen(!open);\n    setArrowStatus(!arrowStatus);\n  };\n\n  const handleSelectOption = (option) => () => {\n    onChange(option?.value);\n    handleTrigger();\n  };\n\n  const handleEvent = useCallback(() => {\n    if (isClicked.current) {\n      isClicked.current = false;\n\n      return;\n    }\n\n    setOpen(false);\n    setArrowStatus(false);\n  }, []);\n\n  const handleClickCapture = useCallback(() => {\n    isClicked.current = true;\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('click', handleEvent);\n\n    return () => {\n      document.removeEventListener('click', handleEvent);\n    };\n  });\n\n  const renderMenu = () => {\n    return (\n      <ul className={styles.menu}>\n        {options?.map((option) => (\n          <li\n            value={option.value}\n            key={option.key}\n            onClick={handleSelectOption(option)}\n            title={option.value}\n            style={{\n              fontSize: theme?.initialScreen?.customDropdownInputFontSize,\n              fontFamily: theme?.initialScreen?.customDropdownInputFontFamily,\n              color: theme?.initialScreen?.customDropdownInputColor,\n              backgroundColor: theme?.initialScreen?.customDropdownInputBackgroundColor,\n            }}\n          >\n            {option.value}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div className={styles.selectContainer} onClickCapture={handleClickCapture}>\n      <div className={styles.inputWrapper} onClick={handleTrigger}>\n        <input\n          placeholder={i18next.t('customDropdownPlaceholder', {\n            select: theme?.initialScreen?.customDropdownInputPlaceholder || 'Select',\n            label: toLowerCase(label),\n            interpolation: { escapeValue: false },\n          })}\n          className={clsx(styles.input, {\n            [commonStyles.isError]: isError,\n          })}\n          onChange={noop}\n          value={value ?? ''}\n          onBlur={onBlur}\n          data-qa=\"test-custom-dropdown\"\n          readOnly\n          style={{\n            fontSize: theme?.initialScreen?.customDropdownInputFontSize,\n            fontFamily: theme?.initialScreen?.customDropdownInputFontFamily,\n            color: theme?.initialScreen?.customDropdownInputColor,\n            backgroundColor: theme?.initialScreen?.customDropdownInputBackgroundColor,\n          }}\n        />\n        <img\n          src={arrow}\n          alt=\"arrow\"\n          className={clsx(styles.arrow, {\n            [styles.isActive]: arrowStatus,\n          })}\n        />\n      </div>\n\n      {open ? renderMenu() : null}\n    </div>\n  );\n};\n\nexport const CustomDropdown = React.forwardRef<HTMLDivElement>((props: Props, ref) => {\n  const { label, onChange, onBlur, options, value, isError, required } = props;\n  const {\n    webchatState: { theme },\n  } = useContext(WebchatContext);\n\n  return (\n    <div className={styles.customDropdown} ref={ref}>\n      <div className={commonStyles.placeholder} />\n      <div className={styles.wrapper}>\n        <div className={styles.labelWrapper}>\n          <span\n            className={styles.label}\n            data-qa=\"custom-dropdown-label\"\n            style={{\n              fontSize: theme?.initialScreen?.customDropdownLabelFontSize,\n              fontFamily: theme?.initialScreen?.customDropdownLabelFontFamily,\n              color: theme?.initialScreen?.customDropdownLabelColor,\n            }}\n          >\n            {label}\n            {required ? <span className={commonStyles.isRequired}>*</span> : null}\n          </span>\n        </div>\n\n        <Select\n          label={label}\n          options={options}\n          onChange={onChange}\n          onBlur={onBlur}\n          value={value}\n          isError={isError}\n        />\n      </div>\n\n      <div className={commonStyles.placeholder} />\n    </div>\n  );\n});\n","/*\n * Talkdesk Confidential\n *\n * Copyright (C) Talkdesk Inc. 2022\n *\n * The source code for this program is not published or otherwise divested\n * of its trade secrets, irrespective of what has been deposited with the\n * U.S. Copyright Office. Unauthorized copying of this file, via any medium\n * is strictly prohibited.\n */\nimport { CustomDropdown } from './CustomDropdown';\n\nexport default CustomDropdown;\n"],"names":["noop","_newArrowCheck","_this","bind","Select","props","_theme$initialScreen5","_theme$initialScreen6","_theme$initialScreen7","_theme$initialScreen8","_theme$initialScreen9","_this2","options","onChange","value","onBlur","isError","label","_useState","useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","arrowStatus","setArrowStatus","theme","useContext","WebchatContext","webchatState","isClicked","useRef","handleTrigger","handleSelectOption","option","_this3","handleEvent","useCallback","current","handleClickCapture","useEffect","_this4","document","addEventListener","removeEventListener","renderMenu","_this5","React","className","styles","menu","map","_theme$initialScreen","_theme$initialScreen2","_theme$initialScreen3","_theme$initialScreen4","key","onClick","title","style","fontSize","initialScreen","customDropdownInputFontSize","fontFamily","customDropdownInputFontFamily","color","customDropdownInputColor","backgroundColor","customDropdownInputBackgroundColor","selectContainer","onClickCapture","inputWrapper","placeholder","i18next","select","customDropdownInputPlaceholder","toLowerCase","interpolation","escapeValue","clsx","input","_defineProperty","commonStyles","readOnly","src","arrow","alt","isActive","ref","_theme$initialScreen10","_theme$initialScreen11","_theme$initialScreen12","required","customDropdown","wrapper","labelWrapper","customDropdownLabelFontSize","customDropdownLabelFontFamily","customDropdownLabelColor","isRequired"],"sourceRoot":""}